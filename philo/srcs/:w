/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tcasale <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/10 14:00:07 by tcasale           #+#    #+#             */
/*   Updated: 2023/02/10 12:33:06 by tcasale          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../headers/philosopher.h"

int	parse_arg(t_program *prog, int argc, char **argv)
{
	if (argc >= 5)
	{
		if (argc <= 6)
		{
			prog->nb_philo = ft_atoi(argv[1]);
			prog->ttd = ft_atoi(argv[2]);
			prog->tte = ft_atoi(argv[3]);
			prog->tts = ft_atoi(argv[4]);
			prog->is_dead = 0;
			prog->eat_all = 0;
			if (argc == 6)
			{
				prog->limit_eat = 1;
				prog->nb_must_eat = ft_atoi(argv[5]);
			}
			else
				prog->limit_eat = 0;
			return (check_good_parsing_value(prog, argv));
		}
	}
	return (0);
}

int	check_good_parsing_value(t_program *prog, char **argv)
{
	if (prog->nb_philo == 0 && ft_strcmp(argv[1], "0") != 0)
		return (0);
	if (prog->ttd == 0 && ft_strcmp(argv[2], "0") != 0)
		return (0);
	if (prog->tte == 0 && ft_strcmp(argv[3], "0") != 0)
		return (0);
	if (prog->tts == 0 && ft_strcmp(argv[4], "0") != 0)
		return (0);
	if (prog->limit_eat == 1)
	{
		if (prog->nb_must_eat == 0 && ft_strcmp(argv[5], "0") != 0)
			return (0);
	}
	return (1);
}

void	init_forks(t_program *prog)
{
	int	n;

	n = 0;
	prog->forks = (t_fork *)malloc(sizeof(t_fork) * prog->nb_philo);
	pthread_mutex_init(&prog->printer, NULL);
	pthread_mutex_init(&prog->death_printer, NULL);
	pthread_mutex_init(&prog->checker, NULL);
	while (n < prog->nb_philo)
	{
		pthread_mutex_init(&prog->forks[n].mutex, NULL);
		if (prog->philos[n].id == 0)
			prog->philos[n].r_fork = &prog->forks[prog->nb_philo];
		else
			prog->philos[n].r_fork = &prog->forks[prog->philos[n].id];
		if (prog->philos[n].id == prog->nb_philo)
			prog->philos[n].l_fork = &prog->forks[0];
		else
			prog->philos[n].l_fork = &prog->forks[prog->philos[n].id - 1];
		printf("pute\n");
		n++;
	}
}

void	init_philos(t_program *prog)
{
	int		n;

	n = 0;
	prog->start_time = get_time();
	prog->order = 1;
	prog->is_dead = 0;
	prog->philos = (t_philo *)malloc(sizeof(t_philo) * prog->nb_philo);
	while (n < prog->nb_philo)
	{
		prog->philos[n].id = n + 1;
		prog->philos[n].just_eat = 0;
		prog->philos[n].just_sleep = 0;
		prog->philos[n].nb_eat = 0;
		prog->philos[n].prog = prog;
		prog->philos[n].last_time_eat = prog->start_time;
		pthread_create(&prog->philos[n].thread, NULL, life, &prog->philos[n]);
		n++;
	}
	check_end_diner(prog);
}

void	check_end_diner(t_program *prog)
{
	int	n;

	n = 0;
	while (check_diner_continu(prog))
	{
		pthread_mutex_lock(&prog->checker);
		prog->eat_all = check_all_eat(prog);
		prog->order = check_change_order(prog);
		pthread_mutex_unlock(&prog->checker);
	}
	while (n < prog->nb_philo)
	{
		pthread_join(prog->philos[n].thread, NULL);
		n++;
	}
}
